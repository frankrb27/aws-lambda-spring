AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation sample template that contains a single Lambda function
  behind an API Gateway based on Swagger
Resources:

  AuthLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: A auth function
      FunctionName: AuthLambda
      Handler: com.cobiscorp.auth.StreamLambdaHandler::handleRequest
      Runtime: java8
      CodeUri: target/auth-1.0.0-lambda-package.zip
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
        
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        
  AuthApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Auth API
      Description: API used for Auth requests
      FailOnWarnings: true
      BodyS3Location:
        Bucket: cobis-openapi-poc
        Key: specs/COBISAuthorizationAPI.yaml      
                
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - AuthLambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AuthApi
          - /*
          
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
                
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayCloudWatchLogsRole
        - Arn
        
  AuthApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref AuthApi
      StageName: LATEST
      
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref AuthApi
      StageName: DummyStage
      
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref AuthApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com
